<project default="import-packages-from-repo" basedir="." xmlns:antcontrib="antlib:net.sf.antcontrib"
	xmlns:xmltask="antlib:com.oopsconsultancy.xmltask">

	<property file="build.properties" />

	<property name="repoLocation" value="C:\githere\" />
	<property name="packages_path_in_repo" value="${repoLocation}/assets/IS/packages" />
	<property name="packages-to-import" value="package_1,package_2" />
	<property name="server-host" value="localhost" />
	<property name="server-port" value="5555" />
	<property name="userid" value="Administrator" />
	<property name="password" value="manage" />
	<property name="webMethods.home" value="C:\SoftwareAG" />
	<property name="integration-server-packages" value="${webMethods.home}/IntegrationServer/packages" />

	<path id="classpath.ant">
		<fileset file="${webMethods.home}/common/lib/ant/ant-contrib-1.0b3.jar" />
	</path>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties" uri="antlib:net.sf.antcontrib" classpathref="classpath.ant" />
	<taskdef uri="antlib:net.sf.antcontrib" resource="net/sf/antcontrib/antlib.xml" classpathref="classpath.ant" />

	<target name="import-packages-from-repo">
		<dirset id="dist.contents" dir="${packages_path_in_repo}">
			<include name="*"/>
		</dirset>
		<property name="webMethods.projects.filter" refid="dist.contents" />

		<antcontrib:for list="${webMethods.projects.filter}" delimiter=";" param="val">
			<sequential>
				<antcall target="import-package">
					<param name="packageName" value="@{val}" />
				</antcall>
			</sequential>
		</antcontrib:for>

		<antcontrib:for list="${webMethods.projects.filter}" delimiter=";" param="val">
			<sequential>
				<antcall target="activate-package">
					<param name="packageName" value="@{val}" />
				</antcall>
			</sequential>
		</antcontrib:for>
	</target>

	<target name="interactive-install">
		<!-- Prompt the developer to proceed with installation -->
		<input addproperty="proceed" message="Do you want to install package ${packageName}? (yes/no)"/>
		<condition property="should.proceed" value="true">
			<equals arg1="${proceed}" arg2="yes"/>
		</condition>

		<!-- If the user chooses to proceed, call import-package -->
		<antcontrib:if>
			<condition>
				<isset property="should.proceed"/>
			</condition>
			<then>
				<antcall target="import-package">
					<param name="packageName" value="${packageName}" />
				</antcall>
			</then>
			<else>
				<echo message="Skipping package: ${packageName}"/>
			</else>
		</antcontrib:if>
	</target>

	<target name="import-package">
		<!-- Check the OS and set a property -->
		<condition property="os.is.windows" value="true">
			<os family="windows" />
		</condition>

		<condition property="os.is.mac" value="true">
			<os family="mac" />
		</condition>

		<!-- Echo the detected OS -->
		<antcontrib:if>
			<equals arg1="${os.is.windows}" arg2="true"/>
			<then>
				<echo message="Detected OS: Windows" />
				<antcall target="import-package-win">
					<param name="packageName" value="${packageName}" />
				</antcall>
			</then>
			<else>
				<echo message="Detected OS: macOS" />
				<antcall target="import-package-mac">
					<param name="packageName" value="${packageName}" />
				</antcall>
			</else>
		</antcontrib:if>
	</target>

	<target name="import-package-win">
		<echo message="Installing package: ${packageName} on Windows" />
		<echo message="Executing command: mklink /j ${integration-server-packages}\${packageName} ${repoLocation}\${packageName}" />
		<exec executable="cmd">
			<arg line="/c mklink /j ${integration-server-packages}\${packageName} ${repoLocation}\${packageName}" />
		</exec>
		<echo message="Executing command: ${integration-server-packages}\..\bin\jcode.bat make ${packageName}" />
		<exec executable="cmd">
			<arg line="/c ${integration-server-packages}\..\bin\jcode.bat make ${packageName}" />
		</exec>
	</target>

	<target name="import-package-mac">
		<echo message="Installing package: ${packageName} on macOS" />
		<echo message="Executing command: ln -s ${repoLocation}/${packageName} ${integration-server-packages}/${packageName}" />
		<!-- Create a symbolic link (equivalent to mklink /j on Windows) -->
		<exec executable="/bin/ln">
			<arg value="-s" />
			<arg value="${packages_path_in_repo}/${packageName}" />
			<arg value="${integration-server-packages}/${packageName}" />
		</exec>

		<echo message="Executing command: ${integration-server-packages}/../bin/jcode.sh make ${packageName}" />
		<!-- Execute the jcode.sh script (assuming it's a shell script on macOS) -->
		<exec executable="/bin/sh">
			<arg value="${integration-server-packages}/../bin/jcode.sh" />
			<arg value="make" />
			<arg value="${packageName}" />
		</exec>
	</target>

	<target name="activate-package">
		<get
			src="http://${server-host}:${server-port}/invoke/wm.server.packages:packageActivate?package=${packageName}"
			dest="./dummy.html" username="${userid}" password="${password}" />
		<get
			src="http://${server-host}:${server-port}/invoke/wm.server.packages:packageEnable?package=${packageName}"
			dest="./dummy.html" username="${userid}" password="${password}" />
		<get
			src="http://${server-host}:${server-port}/invoke/wm.server.packages:packageReload?package=${packageName}"
			dest="./dummy.html" username="${userid}" password="${password}" />
		<delete file="./dummy.html" />
	</target>

</project>